# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZA8vDmFTJlboZga2A6Yctb8eiOkw6AAZ
"""

#!pip install tensorflow

#!pip install gdown

#pip install --upgrade tensorflow

#!pip install --upgrade keras
#!pip install streamlit

import streamlit as st
import tensorflow as tf
from PIL import Image
import numpy as np
import gdown
import os

url = 'https://drive.google.com/uc?id=1hQ_gEuno0tOtAIx3ReKhS1SnQ4OEdXqx'
model_path = 'my_model.keras'

if not os.path.exists(model_path):
    with st.spinner('Downloading model...'):
        gdown.download(url, model_path, quiet=False)

@st.cache_resource
def load_model():
    return tf.keras.models.load_model(model_path)

model = load_model()

species_names = [
    "Mantled Howler", "Patas Monkey", "Bald Monkey", "Japanese Macaque",
    "Pygmy Marmoset", "White Headed Capuchin", "Silver Marmoset",
    "Common Squirrel Monkey", "Black Headed Night Monkey", "Nilgiri Langur"
]

def preprocess_image(image, target_size=(64, 64)):
    image = image.convert("RGB")
    image = tf.image.resize_with_pad(np.array(image), target_size[0], target_size[1])
    image = np.expand_dims(image, axis=0) / 255.0
    return image

def predict_species(image):
    processed_image = preprocess_image(image)
    prediction = model.predict(processed_image)
    return prediction

st.markdown("""
    <style>
    .main { background-color: #f0f8ff; }
    .title { color: #2f4f4f; font-family: 'Arial'; text-align: center; }
    .prediction { font-size: 20px; color: indigo; font-weight: bold; text-align: center; }
    </style>
    """, unsafe_allow_html=True)

st.markdown('<h1 class="title">Monkeys Species Classification Application</h1>', unsafe_allow_html=True)

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image.', use_column_width=True)
    st.write("")
    st.markdown('<div class="prediction">Classifying...</div>', unsafe_allow_html=True)

    prediction = predict_species(image)
    predicted_index = np.argmax(prediction, axis=1)[0]
    confidence_score = np.max(prediction, axis=1)[0]

    confidence_threshold = 0.8

    if confidence_score > confidence_threshold:
        predicted_species = species_names[predicted_index]
        st.markdown(f'<div class="prediction">Prediction: {predicted_species} (Confidence: {confidence_score:.2f})</div>', unsafe_allow_html=True)
        st.progress(int(confidence_score * 100))
    else:
        st.markdown('<div class="prediction">We couldn\'t confidently classify this image. Try using a clearer image.</div>', unsafe_allow_html=True)

